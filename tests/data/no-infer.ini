[vars]
outdir="/home/sam/Documents/CodeBox/BC/code/enc-dec-test"
data_prefix="/media/sam/Karenin/Flickr8k/Flicker8k_Dataset"
slim_dir="/home/sam/Documents/CodeBox/BC/code/lib/tensorflow-models/research/slim"
vgg_16_ckpt="/media/sam/Karenin/vgg_16.ckpt"
wordlist="/media/sam/Kafka/190424-1/wordlist_limited.txt"
train_img="/home/sam/thesis-code/f8k-demo-img.txt"
train_ref="/home/sam/thesis-code/f8k-demo-ref.txt"

[main]
name="ENC+DEC TEST"
tf_manager=<tf_manager>
output=$outdir
epochs=1
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[]
logging_period="30s"
validation_period="180s"
random_seed=123
batch_size=5

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
save_n_best=1
num_sessions=1
minimize_metric=True

[val_data]
class=dataset.load
series=["reference", "images"]
data=[$train_ref, ("/home/sam/thesis-code/f8k-demo-img.txt", "cica", <image_reader>)]

[train_data]
class=dataset.load
series=["reference", "images"]
data=[$train_ref, ($train_img, <imidz_reader>)]

[image_reader]
class=readers.image_reader.imagenet_reader
prefix=$data_prefix
target_width=224
target_height=224
vgg_normalization=True

[imagenet_vgg16]
class=encoders.imagenet_encoder.ImageNet
name="imagenet"
data_id="images"
network_type="vgg_16"
spatial_layer="vgg_16/conv5/conv5_3"
slim_models_path=$slim_dir
load_checkpoint=$vgg_16_ckpt

[imagenet_fixed_view]
class=model.gradient_blocking.SpatialStatefulView
blocked_object=<imagenet_vgg16>

[attention]
class=attention.Attention
name="image_attention"
state_size=32
encoder=<imagenet_vgg16>
dropout_keep_prob=0.7

[out_proj]
class=decoders.output_projection.maxout_output
maxout_size=32

[vocabulary]
class=vocabulary.from_wordlist
path=$wordlist
contains_header=False
contains_frequencies=True

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<imagenet_vgg16>]
attentions=[<attention>]
vocabulary=<vocabulary>
data_id="reference"
rnn_size=32
max_output_len=40
dropout_keep_prob=0.7
embedding_size=32
rnn_cell="LSTM"
output_projection=<out_proj>

[trainer]
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
clip_norm=1.0

[runner]
class=runners.GreedyRunner
decoder=<decoder>
output_series="caption"
