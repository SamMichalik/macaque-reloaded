[vars]
outdir="/home/sam/thesis-code/macaque/tests/output/dec-only-test"
data_prefix="/home/sam/thesis-code/macaque/tests/data/flickr8k_sample_feats"
wordlist="/home/sam/thesis-code/macaque/tests/data/wordlist_limited.txt"
train_feat="/home/sam/thesis-code/macaque/tests/data/flickr8k_sample_feats.txt"
train_ref="/home/sam/thesis-code/macaque/tests/data/flickr8k_sample_refs.txt"

[main]
name="DEC-ONLY TEST"
tf_manager=<tf_manager>
output=$outdir
epochs=1
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[]
logging_period=100
validation_period=20
random_seed=123
batch_size=32

[batch_scheme]
class=dataset.BatchingScheme
batch_size=64
drop_remainder=False
ignore_series=["feature_maps"]

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
save_n_best=1
num_sessions=1
minimize_metric=True

[val_data]
class=dataset.load
series=["reference", "feature_maps"]
data=[$train_ref, ($train_feat, <numpy_reader>)]

[train_data]
class=dataset.load
series=["reference", "feature_maps"]
data=[$train_ref, ($train_feat, <numpy_reader>)]

[numpy_reader]
class=readers.numpy_reader.from_file_list
prefix=$data_prefix

[imagenet_vgg19]
class=encoders.numpy_stateful_filler.SpatialFiller
name="imagenet"
input_shape=[14, 14, 512]
data_id="feature_maps"

[tgt_vocabulary]
class=vocabulary.from_wordlist
path=$wordlist
contains_header=False
contains_frequencies=True

[attention]
class=attention.Attention
name="image_attention"
state_size=16
encoder=<imagenet_vgg19>
dropout_keep_prob=0.7

[out_proj]
class=decoders.output_projection.maxout_output
maxout_size=16

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<imagenet_vgg19>]
attentions=[<attention>]
vocabulary=<tgt_vocabulary>
data_id="reference"
rnn_size=16
max_output_len=10
dropout_keep_prob=0.7
embedding_size=16
rnn_cell="LSTM"
output_projection=<out_proj>

[trainer]
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
clip_norm=1.0

[runner]
class=runners.GreedyRunner
decoder=<decoder>
output_series="greedy_caption"

[wa_runner]
class=runners.WordAlignmentRunner
decoder=<decoder>
attention=<attention>
output_series="alpha"

